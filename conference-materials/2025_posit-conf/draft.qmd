---
title: "Death by Dropdown?<br>Engineer Insightful Shiny Apps<br>with Behavioral Science"
author: "Jeremy Winget, PhD"
date: "2025-09-07"
date-format: "MMMM D, YYYY"
execute:
  echo: true
  eval: true
format:
  revealjs:
    code-block-background: true
    highlight-style: github
    slide-number: false
    transition: fade
    auto-animate: true
    width: 1600
    height: 900
    footer: "posit::conf(2025) | jrwinget\\.com"
    title-slide-attributes:
      data-background-image: "img/posit-conf.png"
      data-background-position: "top left"
      data-background-repeat: "no-repeat"
      data-background-color: "#213d4f"
      data-background-opacity: "0.25"
      data-background-size: "45%"
---

## {.center background-color="#2c3e50"}

::: {.text-xl}
**Ever open a dashboard with 18 filters across 6 tabs...<br>
and wonder where to even begin?**
:::

:::: {.columns .center}
::: {.column width="45%" .fragment .center}
<div class="tenor-gif-embed" data-postid="596341483704119392" data-share-method="host" data-aspect-ratio="1.32447" data-width="700px"><a href="https://tenor.com/view/monkey-computer-work-bug-developer-gif-596341483704119392">Monkey Computer GIF</a>from <a href="https://tenor.com/search/monkey-gifs">Monkey GIFs</a></div><script type="text/javascript" async src="https://tenor.com/embed.js"></script>
:::

::: {.column width="45%" .fragment .center}
<div class="tenor-gif-embed" data-postid="17038619" data-share-method="host" data-aspect-ratio="1.32447" data-width="925px"><a href="https://tenor.com/view/ron-swanson-parks-and-recreation-parks-and-rec-computer-dumpster-gif-17038619">Ron Swanson Parks And Recreation GIF</a></div><script type="text/javascript" async src="https://tenor.com/embed.js"></script>
:::
::::

::: {.notes}
- 10 seconds
- Ever open a dashboard with 18 filters across 6 separate tabs...and try to figure out where to even start?
- I mean, that's a lot of data and different ways slicing it to get a full understanding of what's going on...so what do you do?
- That is...if you haven't made your career out of exploring data sets like most executives making decisions...what do you do?
- [CLICK] Maybe you feel a bit like this...
- [PAUSE]
- [CLICK] Or maybe you have some bigger feelings about it...
- I get the feeling I'm not the only one who's been here before
:::

## Dashboard Support Group {background-color="#2c3e50"}

:::: {.columns}
::: {.column width="50%"}
### Raise hand if you've ever: {style="color: var(--teal-light) !important;"}
- Designed a UI with 10+ filters?
- Had a user ask for "one more dropdown"?
- Built a Shiny app with more `selectInput()` than insights?
:::

::: {.column width="50%" .center .fragment}
### Welcome! You're among friends 😊 {style="color: var(--coral-light) !important;"}

*Think of our time together as a little therapy session for dropdown overload*
:::

::: {.column width="50%" style="margin-top: var(--space-8);" .fragment}
### 👋 Hi, I'm Jeremy! {style="color: var(--indigo-light) !important;"}

**I'm a psychologist by training, but probably not the kind you're thinking of**

*Contrary to popular belief, most psychologists work with data. Not clients.*
:::

::: {.column width="50%" style="margin-top: var(--space-8);" .fragment .center}
### My Journey {style="color: var(--indigo-light) !important;"}

**Applied Social Psychology** → <br>
**Full Stack Engineer** → <br>
**Led Shiny teams at scale** → <br>
**Created {bidux} package**
:::
::::

::: {.notes}
- 45 seconds
- Alright, let's get honest with each other for a moment. Quick show of hands - who here has created a user interface with more than 10 filters? Don't be shy!
- How about this one - who's ever had a client or user ask for "just one more dropdown" when you knew it would make things worse?
- Or here's my personal favorite - who's built a Shiny app with more selectInput() functions than actual insights?
- [CLICK] If any of these sound familiar, then welcome to what I like to call my dashboard support group! You're among friends here.
- Seriously, think of our time together today as a little group therapy session for dropdown overload. We've all been there, and there's no judgment in this room.
- [PAUSE] Let me introduce myself properly - Hi, I'm Jeremy! I'm a psychologist by training, but probably not the kind you're thinking of.
- Here's something that surprises people - contrary to popular belief, most psychologists work with data, not individual clients. We use it to study behavior patterns, understand how people make decisions, and figure out why humans do the puzzling things we do.
- I have a PhD in Applied Psychology where I specifically studied how people and groups process information and make decisions under pressure - which, it turns out, is exactly what happens when someone opens your dashboard!
- I transitioned from academia into industry where I got involved in leading Shiny teams at scale, and I've spent nearly 10 years building enterprise apps and dashboards that people actually use and find valuable.
- But I have to be honest - it wasn't always that way. I've built MANY dashboards that flopped spectacularly, even though they were technically perfect. Every single one of those problems I mentioned? Yeah, I've made them all.
- And that's exactly what led me to my core realization about why dashboards succeed or fail...
:::

## Core Realization {background-color="#5b6bbf"}

> Most dashboard failures aren't technical...
>
> They're psychological.

::: {.notes}
- 15 seconds
- Most dashboard failures aren't technical, they're psychological
- That might sound obvious, but it's a critical distinction...and one that we as developers can also easily address in our workflows
- Let me show you what I mean...and how technically great products can still fail spectacularly
:::

## {background-image="img/ui-before1.png" background-size="contain" background-color="#2c3e50"}

::: {.text-box-overlay-dark .absolute left="-200" bottom="100" .fragment}
### Real client. Real dashboard. Real problems.

- 18 filters across 6 tabs
- Every possible data view
- Users' curiosity quickly vanished
    - And so did their visits

::: {.fragment}
**We ran telemetry for 30 days...**
:::

:::

::: {.notes}
- 45 seconds
- I worked with a client who had this 'comprehensive' dashboard
- Blinded here for confidentiality...but incredibly close to the actual design
- 18 filters, 6 tabs, every possible view, nearly zero adoption
- Why this matters: This represents thousands of developer hours and client budget wasted on technically perfect but psychologically broken software
- The client was frustrated bc they had spent months building this thing, but no one used it
- Users were initially curious, but quickly overwhelmed...and eventually, they just vanished
- As developers, we can relate...we've all built features nobody uses
- But here's why this matters more than frustration:
    1. Technical debt from unused complexity compounds over time
    2. User abandonment patterns replicate across similar projects
    3. Without data-driven insights, we keep making the same UX mistakes
- [CLICK] So we ran telemetry for 30 days...
- This data changed everything about how we approached the dashboard design
:::

## Telemetry Revealed the Journey {background-color="#2c3e50"}

```{r}
#| echo: false
#| fig-width: 14
#| fig-height: 7
#| fig.align: "center"

library(ggplot2)
library(dplyr)
library(tidyr)

journey <- tibble(
  stage = c(
    "Visited app URL",
    "Opened dashboard",
    "Applied ≥1 filter",
    "Returning within 1 week"
  ),
  pct   = c(95, 88, 52, 20)
)

journey |>
  mutate(stage = reorder(stage, -pct)) |>
  ggplot(aes(x = stage, y = pct)) +
  geom_col(fill = "#5FBDB0") +
  geom_text(
    aes(label = paste0(pct, "%")),
    vjust = -0.5, size = 10
  ) +
  scale_y_continuous(limits = c(0,100), expand = c(0,0)) +
  labs(
    subtitle = "1,287 sessions tracked over 30 days",
    y = "Users (%)", x = NULL
  ) +
  theme_minimal(base_size = 20) +
  theme(
    plot.title = element_text(size = 36, face = "bold"),
    plot.subtitle = element_text(size = 24),
    axis.text.x = element_text(
      size = 16,
      angle = 25,
      hjust = 1
    ),
    axis.text.y = element_text(size = 18),
    panel.grid = element_blank()
  ) +
  ylim(0, 110)
```

::: {.notes}
- 45 seconds
- Look at this journey of despair
- [update notes here]
- This is behavioral science **screaming** at us that something is wrong here
:::

## Enter: Behavioral Science {background-color="#5b6bbf"}

::: {.text-large}
**What is it?** The interdisciplinary study of how people make decisions<br>
(Spoiler: irrationally, yet predictably & consistently)
:::

::: { style="margin-top: var(--space-7);"}
:::: {.columns .fragment}

### Classic Example: The Paradox of Choice {style="text-align: center; color: var(--coral-light) !important;"}

::: {.column width="45%" .fragment}

::: {.text-large}
**Researchers**: Sheena Iyengar & Mark Lepper

**Setting**: Upscale grocery store sampling booth

**Design**: 24 jams vs. 6 jams display
:::
:::

::: {.column width="45%"}
::: {.r-stack}
![](img/jam-study-blur.png){.fragment width="100%" style="border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.15);"}

![](img/jam-study.png){.fragment width="100%" style="border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.15);"}
:::
:::

::::
:::

::: {.fragment .center style="margin-top: 30px;"}
### **10x higher conversion with fewer options** {style="color: var(--teal-light) !important;"}
:::

::: {.notes}
- 1 minute
- Behavioral science studies how people think, feel, and act...often in the context of decision making
- Surprise...we're not rational...but we are still predictable and fairly consistent when we pay attention to the right drivers
- Let me show you a classic example that mirrors our dashboard problem...Sheena Iyengar & Mark Lepper's famous jam study at Columbia
- They studied people in the field at a fancy grocery store...think Whole Foods or Trader Joe's
- These shoppers walked by a display stand with either 24 jams...(extensive choice condition)...or 6 jams (limited choice condition)
- More choice drew people in...60% stopped at the big display vs. 40% at the small one
- But fewer choices drove action...nearly 30% bought jam after the 6-jam booth, compared to only 3% after the 24-jam booth
- More choice attracted browsers...but paralyzed buyers
- So what do we learn from this?
    - Too many options look appealing but kill follow-through...exactly what happens with dashboards overloaded with filters
:::

## Applied to Dashboards {background-color="#5b6bbf"}

:::: {.columns}
::: {.column width="45%" style="margin-top: var(--space-8);"}
### Core Concepts {style="color: var(--coral-light) !important;"}

- **Cognitive Load**
    - Too many choices overwhelm users' mental capacity
- **Progressive Disclosure**
    - Reveal complexity gradually as users need it
- **Framing Effects**
    - Same data can tell completely different stories
- **Choice Architecture**
    - Guide decisions without restricting options
:::

::: {.column width="45%" .fragment style="margin-top: var(--space-8);"}
### Dashboard Examples {style="color: var(--teal-light) !important;"}

- **Cognitive Load**
    - Start with 3 key filters, hide 15 advanced ones
- **Progressive Disclosure**
    - Show summary → detailed dive → comparisons
- **Framing Effects**
    - "Revenue up 15%" vs "Revenue missed by 5%"
- **Choice Architecture**
    - Smart defaults, logical grouping, visual hierarchy
:::
::::

::: {.notes}
- 30 seconds
- Now the paradox of choice is just one of many behavioral science concepts that directly apply to dashboards
- [CLICK] Let me show you specific examples of how these apply
- Cognitive Load: Instead of 18 filters overwhelming users, start with 3 essential ones and hide advanced options
- Progressive Disclosure: Show high-level KPIs first, then let users drill into details, then comparisons
- Framing Effects: The same revenue number can be "up 15%" or "missed target by 5%" - completely different user reactions
- Choice Architecture: Smart defaults, logical grouping, visual hierarchy guides users naturally
- These aren't just theories...they're actionable engineering principles
:::

## The Solution: Your Dashboard Journey {background-color="#2c3e50"}

:::: {.columns}
::: {.column width="30%"}
### Think of it like a road trip {style="color: var(--coral-light) !important;"}

📍 **Interpret** where you're going<br>
⚠️ **Notice** the warning lights<br>
🌦️ **Anticipate** weather changes<br>
🗺️ **Structure** the best route<br>
✅ **Validate** safe arrival

![](img/vw-bus.jpg){.r-stretch}
:::

::: {.column width="70%" .fragment}
### The BID Framework {style="color: var(--indigo-light) !important;"}

📍 **Interpret** user needs<br>
⚠️ **Notice** friction points<br>
🌦️ **Anticipate** cognitive biases<br>
🗺️ **Structure** information flow<br>
✅ **Validate** understanding

![](img/bid-framework.png){style="box-shadow: none !important; margin-left: 10%"}
:::
::::

::: {.notes}
- 45 seconds
- Think of building dashboards like planning the perfect road trip with friends. You know that feeling when you're mapping out an adventure - equal parts excitement and careful preparation?
- And speaking of adventures - for those Grateful Dead fans in the audience, building user-friendly dashboards really can be a "long, strange trip." But unlike Jerry Garcia's journeys, ours actually have a clear destination and users who need to get there!
- Just like any road trip, you need to interpret where you're going, notice those warning lights on the dashboard, anticipate weather changes...
- [CLICK] This is what I call the BID framework - your roadmap for dashboard success
- Five iterative stages that prevent those dashboard disasters we've all experienced. Think of it as your GPS for user experience.
- Like any memorable road trip, it's not just about reaching your destination - it's about creating a framework that makes the journey enjoyable and the discoveries along the way meaningful for your users.
:::

## What is {bidux}? {background-color="#2c3e50"}

:::: {.columns}
::: {.column width="45%" .text-large}
### An R package that: {style="color: var(--teal-light) !important;"}

- ✅ Works with ANY Shiny dashboard
- ✅ Analyzes telemetry OR works without
- ✅ Auto-suggests behavioral science improvements
- ✅ Custom parameter overrides
:::

::: {.column width="45%"}
:::

::: {.column width="45%" style="margin-top: 150px;"}
:::

::: {.column width="45%" .fragment style="margin-top: 150px;"}
### *Your behavioral scientist in the console* {style="text-align: center !important; color: var(--indigo-light) !important;"}
:::
::::

::: {.notes}
- 30 seconds
- So what exactly is bidux? Think of it as having a friendly behavioral scientist sitting right there in your console, ready to help whenever you're building dashboards.
- It works with any Shiny app you've already built - no need to start over. Whether you have telemetry data or not, it can still provide valuable insights and auto-suggest improvements based on solid behavioral science principles.
- [CLICK] The best part? It translates all those academic psychology concepts into practical, actionable code suggestions that you can implement today. It's like having a psychology PhD on your development team, but one that actually speaks R!
:::

## INTERPRET: Start with Why {background-color="#5b6bbf"}

```{r}
#| code-line-numbers: "3|4|5-10|11-18"
#| output-location: fragment

library(bidux)

interpret_stage <- bid_interpret(
  central_question = "Which markets are driving performance?",
  data_story = list(
    hook = "Q4 revenue hit record high, but satisfaction dipped",
    context = "After aggressive marketing across all regions",
    tension = "West region satisfaction fell 10 points",
    resolution = "Focus retention efforts on underperforming regions"
  ),
  user_personas = list(
    list(
      name = "Product Manager",
      goals = "Monitor weekly KPIs",
      pain_points = "Too many filters to find important insights",
      technical_level = "Moderate"
    )
  )
)
```

::: {.notes}
- 1 minute
- "Start with why - what question does this dashboard answer?"
- [CLICK] First highlight: central_question - this drives everything else
- [CLICK] Second highlight: data_story - this creates narrative structure
- [CLICK] Third highlight: user_personas - this grounds design in real needs
- Why this matters for your daily work: Clear purpose drives every technical decision you make
- Most devs think they do this, but telemetry says otherwise. We jump straight to technical implementation
- The cost: Every filter you add without purpose increases cognitive load exponentially
- This isn't just UX theory - it's engineering efficiency. When you clarify purpose first:
    1. You write less code because you know what to exclude
    2. Your data queries are more focused and performant
    3. User testing becomes objective rather than subjective
    4. You can defend design decisions with evidence, not opinions
- `bid_interpret` creates a structured object that feeds into later stages, making behavioral science actionable in your R workflow
- Think of it as writing better requirements that actually connect to user psychology
:::

## NOTICE: Find the Core Problems {background-color="#5b6bbf"}

:::: {.columns}
::: {.column width="40%"}
```{r}
#| echo: false
#| fig-width: 6
#| fig-height: 8

filters <- tibble::tibble(
  filter = factor(
    paste("Filter", 1:18),
    levels = rev(paste("Filter", 1:18))
  ),
  pct = c(
    33.8, 21.4, 13.6, 7.8, 4.9, 3.9, 2.9, 2.4, 1.8,
    1.4, 1.2, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4
  )
)

ggplot(filters, aes(x = 1, y = filter, fill = pct)) +
  geom_tile(color = "white", size = 1) +
  geom_text(
    aes(label = paste0(pct, "%")),
    size = 5, fontface = "bold",
    color = ifelse(filters$pct > 40, "white", "black")
  ) +
  scale_fill_gradient2(
    low = "#FCE788", mid = "#FCA311", high = "#D7263D",
    midpoint = 40, guide = "none"
  ) +
  labs(
    title = "Actual Filter Usage",
    subtitle = "14 of 18 filters basically ignored",
    x = "",
    y = ""
  ) +
  theme_minimal(base_size = 14) +
  theme(
    axis.text.x = element_blank(),
    axis.ticks = element_blank(),
    panel.grid = element_blank(),
    plot.title = element_text(size = 20, face = "bold"),
    plot.subtitle = element_text(size = 16, color = "#666")
  )
```
:::

::: {.column width="60%" .fragment}
```{r}
notice_stage <- bid_notice(
  previous_stage = interpret_stage,
  problem = "Users are struggling to find key insights",
  evidence = "Telemetry shows over 75% of filters are rarely used"
)
```
:::
::::

::: {.notes}
- 1 minute
- Notice finds the concepts behind the friction points
- Why this stage matters for developers...It turns user complaints into actionable engineering insights
- Look at this heatmap...14 filters basically going unused...4 are completely ignored
- This isn't just usage data...it's technical debt visualization
- What this means for your codebase:
    1. Those unused filters are maintenance overhead with zero ROI
    2. Database queries could be running for features nobody touches
    3. UI complexity is slowing rendering times without value
    4. Future feature requests will compound these problems over time
- `bid_notice` auto-suggests behavioral theories to explain patterns...or power users can override them with specific concepts
- This transforms "users don't like it" into "choice overload is killing task completion"
- Now you have a specific problem to solve with code
:::

## ANTICIPATE: Guard Against Biases {background-color="#5b6bbf"}

:::: {.r-stack}
::: {.fragment .fade-in-then-out}
```{r}
anticipate_stage <- bid_anticipate(previous_stage = notice_stage)
```
:::

::: {.fragment .fade-in-then-out}

```{r}
# Auto-generates bias mitigations
anticipate_stage$bias_mitigations
```
:::

![](img/ui-gain-frame.png){.fragment auto-animate=true}

![](img/ui-loss-frame.png){.fragment auto-animate=true}

::: {.text-box-overlay-dark .fragment .fade-up}
**Same Data, Different Story**
:::
::::

::: {.notes}
- 1 minute
- "Anticipate cognitive biases"
- "Same data tells different stories"
- "Marketing sees progress, Finance sees gap"
- "bidux auto-generates these guards"
- "Framing changes everything"
:::

## STRUCTURE: Progressive Disclosure {background-color="#5b6bbf"}

:::: {.r-stack}
::: {.fragment .fade-in-then-out}
```{r}
structure_stage <- bid_structure(previous_stage = anticipate_stage)
```
:::

::: {.fragment .fade-in}

```{r}
# Provides suggestions how how to implement
str(structure_stage$suggestions[[1]])
```
:::

::: {.fragment .fade-left style="width: 70%"}
![](img/f-pattern-heatmap.png)
:::
::::

::: {.notes}
- 1.5 minutes
- "Structure provides implementation roadmap"
- "Specific code recommendations"
- "Progressive disclosure reduces cognitive load"
- [CLICK] "Follow natural eye patterns"
:::

## VALIDATE: Plain Language Wins {background-color="#5b6bbf"}

:::: {.r-stack}
::: {.fragment .fade-in}
```{r}
validate_stage <- bid_validate(previous_stage = structure_stage)
```
:::

::: {.fragment .fade-up style="width: 70%"}
![](img/ui-summary.png)
:::
::::

::: {.notes}
- 1 minute
- "Validate ensures understanding"
- "Plain language summaries"
- "Auto-generates checklist"
:::

## The Transformation {.center background-color="#2c3e50"}

![](img/ui-before2.png)

::: {.notes}
- 45 seconds
- [update notes here]
- "Δ (pp)"" is absolute percentage-point change
- Relative change is After/Before - 1, then rounded
- [CLICK] More users. Deeper engagement. Stronger retention.
:::

## The Transformation {.center background-color="#2c3e50"}

:::: {.r-stack}

![](img/ui-after.png)

::: {.text-box-overlay-dark .fragment}
| Metric                  | Before (%) | After (%) |   Δ    | Relative change |
| ----------------------- | :--------: | :-------: | :----: | :-------------- |
| Visited app URL         |     95     |     97    |   +2   | +2%             |
| Opened dashboard        |     88     |     95    |   +7   | +8%             |
| Applied ≥1 filter       |     52     |     72    |   +20  | +38%            |
| Returning within 1 week |     20     |     35    |   +15  | +75%            |

::: {.fragment .text-xl style="margin-top: 30px;"}
**More users. Deeper engagement. Stronger retention.**
:::
:::
::::

::: {.notes}
- 45 seconds
- [update notes here]
- "Δ (pp)"" is absolute percentage-point change
- Relative change is After/Before - 1, then rounded
- [CLICK] More users. Deeper engagement. Stronger retention.
:::

## Real Impact Across Industries {background-color="#5b6bbf"}

```{r}
#| echo: false
#| fig-width: 14
#| fig-height: 7

n_deploy <- 12

metrics_long <- tibble(
  Metric = factor(
    c("Time to Insight", "Task Completion", "User Satisfaction", "Return Rate"),
    levels = c("Time to Insight", "Task Completion", "User Satisfaction", "Return Rate")
  ),
  Before = c(180, 48, 44, 22),
  After  = c(115, 62, 56, 30)
) |>
  pivot_longer(cols = c(Before, After),
               names_to = "State", values_to = "Value") |>
  mutate(State = factor(State, levels = c("Before", "After"))) |>
  group_by(Metric) |>
  mutate(
    BeforeValue = Value[State == "Before"][1],
    DiffPP      = ifelse(State == "After", Value - BeforeValue, NA_real_),
    MaxValue    = max(Value)
  ) |>
  ungroup()

pal <- c("Before" = "#4C78A8", "After" = "#72B7B2")

ggplot(metrics_long, aes(x = Metric, y = Value, fill = State)) +
  geom_col(position = position_dodge(width = 0.7), width = 0.7) +
  geom_text(
    aes(
      label = ifelse(
        Metric == "Time to Insight",
        paste0(Value, "s"),
        paste0(Value, "%")
      )
    ),
    position = position_dodge(width = 0.7),
    vjust = -0.5,
    size = 6,
    fontface = "bold"
  ) +
  geom_text(
    data = metrics_long |>
      filter(State == "After" & !is.na(DiffPP)) |>
      distinct(Metric, .keep_all = TRUE),
    aes(
      y = MaxValue + 20,
      label = ifelse(
        Metric == "Time to Insight",
        paste0(round(DiffPP), "s"),
        paste0("+", round(DiffPP), "%")
      )
    ),
    color = "#FF4081",
    size = 6,
    fontface = "bold"
  ) +
  scale_fill_manual(values = pal) +
  labs(
    title = paste("BID Framework Impact:", n_deploy, "Enterprise Deployments"),
    subtitle = "Average across healthcare, finance, and customer goods sectors",
    y = NULL,
    x = NULL
  ) +
  theme_minimal(base_size = 18) +
  theme(
    legend.position = "top",
    legend.title = element_blank(),
    plot.title = element_text(size = 24, face = "bold"),
    plot.subtitle = element_text(size = 14),
    axis.text = element_text(size = 14),
    panel.grid.major.x = element_blank()
  ) +
  coord_cartesian(
    ylim = c(0, max(metrics_long$MaxValue) + 20)
  )
```

::: {.notes}
- 30 seconds
- "Real results from 12 enterprise deployments"
- Why these metrics matter for your engineering career:
    1. 82% reduction in time to insight = users find value faster = better adoption metrics for your projects
    2. 143% improvement in task completion = fewer support tickets = less maintenance overhead
    3. These improvements compound: happy users request thoughtful features, not band-aid fixes
- "This works across industries" - the psychological principles are universal, but implementation adapts to your specific R/Shiny tech stack
- Bottom line: Better user psychology = better engineering outcomes = more impactful projects in your portfolio
:::

## Simplified UX Workflows {background-color="#2c3e50"}

```{r}
#| eval: false
#| code-line-numbers: "1-2|4-5|6|7|8-10|11"

# Using telemetry data
issues <- bid_telemetry("dashboard_telemetry.sqlite")

report <- filter(issues, severity == "critical") |>
  slice_head(n = 1) |>
  bid_interpret(central_question = "Which markets are driving performance?") |>
  bid_notice_issue(issues[1, ]) |> # bridge from telemetry to BID
  bid_anticipate() |>
  bid_structure() |>
  bid_validate() |>
  bid_report(format = "markdown", include_diagrams = TRUE)
```

::: {.notes}
- 1 minute
- "Complete workflow in one pipe - works with or without telemetry"
- [CLICK] With Telemetry tab first:
- [CLICK] First highlight: Load and analyze existing data
- [CLICK] Second highlight: The 5-stage BID pipeline
- [CLICK] Third highlight: Generate report
- [CLICK] Without Telemetry tab:
- [CLICK] First highlight: Manual problem definition
- [CLICK] Second highlight: Same 5-stage pipeline
- [CLICK] Third highlight: Text output for tickets/PRs
- bid_telemetry() provides a tidy tibble of issues compatible with dplyr
- bid_notice_issue() is the bridge from a single issue to a BID Notice stage
- The 5-stage chain culminates in bid_report(), which can produce text, HTML, or markdown
- Output is a concise report you can paste into PRs or tickets
- "Everything you need to fix your dashboard"
:::

## Simplified UX Workflows {background-color="#2c3e50"}

```{r}
#| eval: false
#| code-line-numbers: "1|2-10|11-14|15-17|18"

# Without telemetry data
report <- bid_interpret(
    central_question = "Which markets are driving performance?",
    data_story = list(
      hook = "Q4 revenue hit record high, but satisfaction dipped",
      context = "After aggressive marketing across all regions",
      tension = "West region satisfaction fell 10 points",
      resolution = "Focus retention efforts on underperforming regions"
    )
  ) |>
  bid_notice(
    problem = "Users are struggling to find key insights",
    evidence = "Users report not knowing where to start"
  ) |>
  bid_anticipate() |>
  bid_structure() |>
  bid_validate() |>
  bid_report(format = "text", include_diagrams = FALSE)
```

::: {.notes}
- 1 minute
- "Complete workflow in one pipe - works with or without telemetry"
- [CLICK] With Telemetry tab first:
- [CLICK] First highlight: Load and analyze existing data
- [CLICK] Second highlight: The 5-stage BID pipeline
- [CLICK] Third highlight: Generate report
- [CLICK] Without Telemetry tab:
- [CLICK] First highlight: Manual problem definition
- [CLICK] Second highlight: Same 5-stage pipeline
- [CLICK] Third highlight: Text output for tickets/PRs
- bid_telemetry() provides a tidy tibble of issues compatible with dplyr
- bid_notice_issue() is the bridge from a single issue to a BID Notice stage
- The 5-stage chain culminates in bid_report(), which can produce text, HTML, or markdown
- Output is a concise report you can paste into PRs or tickets
- "Everything you need to fix your dashboard"
:::

## Your Turn: Start Today {background-color="#5b6bbf"}

:::: {.columns .center}
::: {.column width="65%"}
```{r}
#| eval: false
#| code-line-numbers: "1-2|4-11|13|15|17"

install.packages("bidux")
library(bidux)

result <- bid_interpret("What do users need?") |>
  bid_notice(
    problem = "Death by dropdown",
    evidence = "User complaints"
  ) |>
  bid_anticipate() |>
  bid_structure() |>
  bid_validate()

summary(result)

bid_concepts("choice overload")

result$next_steps
```
:::

::: {.column width="35%" .fragment}
### Resources:
- 🔬 **BID Framework**: [github.com/jrwinget/bid-framework](https://github.com/jrwinget/bid-framework)
- 📚 **{bidux} Docs**: [github.com/jrwinget/bidux](https://github.com/jrwinget/bidux)
- 💬 **Community**: [github.com/jrwinget/bidux/discussions](https://github.com/jrwinget/bidux/discussions)
- 🤝 **Let's Connect!**
  - <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-bluesky" viewBox="0 0 16 16">
  <path d="M3.468 1.948C5.303 3.325 7.276 6.118 8 7.616c.725-1.498 2.698-4.29 4.532-5.668C13.855.955 16 .186 16 2.632c0 .489-.28 4.105-.444 4.692-.572 2.04-2.653 2.561-4.504 2.246 3.236.551 4.06 2.375 2.281 4.2-3.376 3.464-4.852-.87-5.23-1.98-.07-.204-.103-.3-.103-.218 0-.081-.033.014-.102.218-.379 1.11-1.855 5.444-5.231 1.98-1.778-1.825-.955-3.65 2.28-4.2-1.85.315-3.932-.205-4.503-2.246C.28 6.737 0 3.12 0 2.632 0 .186 2.145.955 3.468 1.948"/></svg> [@jrwinget](https://bsky.app/profile/jrwinget.bsky.social)
  - <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-linkedin" viewBox="0 0 16 16">
  <path d="M0 1.146C0 .513.526 0 1.175 0h13.65C15.474 0 16 .513 16 1.146v13.708c0 .633-.526 1.146-1.175 1.146H1.175C.526 16 0 15.487 0 14.854zm4.943 12.248V6.169H2.542v7.225zm-1.2-8.212c.837 0 1.358-.554 1.358-1.248-.015-.709-.52-1.248-1.342-1.248S2.4 3.226 2.4 3.934c0 .694.521 1.248 1.327 1.248zm4.908 8.212V9.359c0-.216.016-.432.08-.586.173-.431.568-.878 1.232-.878.869 0 1.216.662 1.216 1.634v3.865h2.401V9.25c0-2.22-1.184-3.252-2.764-3.252-1.274 0-1.845.7-2.165 1.193v.025h-.016l.016-.025V6.169h-2.4c.03.678 0 7.225 0 7.225z"/></svg> [@jrwinget](https://www.linkedin.com/in/jrwinget/)
  - 🌐 [jrwinget.com](https://www.jrwinget.com)
  - 📧 [contact@jrwinget.com](mailto:contact@jrwinget.com)
:::
::::

::: {.notes}
- 30 seconds
- Here's the exciting part - you can get started with bidux right now! It's available on CRAN, so installation is as simple as any other R package.
- The beautiful thing is it works immediately, even without telemetry data. You can start getting insights and suggestions for your existing dashboards today.
- [CLICK] I've also prepared plenty of resources to support your journey. These slides will be available in the BID framework repository, and I'll be posting them on my website as well.
- I genuinely believe the R and Shiny community is one of the most supportive and collaborative communities out there, so please join us! Feel free to connect with me on Bluesky, LinkedIn, or email - I'd love to hear about your experiences and learn from your dashboard challenges too.
:::

## One Thing to Remember {background-color="#2c3e50"}

:::: {.columns .center}
::: {.column width="20%" .center}
![](img/hex-bidux.png){style="box-shadow: none !important;"}
:::

::: {.column width="60%" .text-display .center}
**Dashboards don't need more features.**<br>
**They need fewer obstacles.**

::: {.fragment}
Let's fix that together!
:::
:::

::: {.column width="20%" .fragment .center}
*Special thanks to the<br>
posit::conf organizers,<br>
Shiny community,<br>
and all of you for caring about your users*
:::
::::

::: {.notes}
- 20 seconds
- If you take away just one thing from our time together today, let it be this: Dashboards don't need more features - they need fewer obstacles.
- Every dropdown, every filter, every choice we add should bring users closer to insight, not further from it.
- [CLICK] And here's the thing - we can absolutely fix this together. The tools exist, the knowledge exists, and most importantly, you all clearly care about creating better experiences for your users.
- [CLICK] Before I close, I want to offer my heartfelt thanks to the posit::conf organizers for creating this incredible space for learning, to the broader Shiny community for pushing the boundaries of what's possible with data visualization, and most importantly, to all of you for caring enough about your users to be here learning how to serve them better.
- Now, I'd love to hear your questions and learn about the dashboard challenges you're facing!
:::
