---
title: "Death by Dropdown?<br>Engineer Insightful Shiny Apps<br>with Behavioral Science"
author: "Jeremy Winget, PhD"
date: "2025-09-07"
date-format: "MMMM D, YYYY"
execute:
  echo: true
  eval: true
format:
  revealjs:
    code-block-background: true
    highlight-style: github
    slide-number: false
    transition: fade
    auto-animate: true
    width: 1600
    height: 900
    footer: "posit::conf(2025) | jrwinget\\.com"
    title-slide-attributes:
      data-background-image: "img/posit-conf.png"
      data-background-position: "top left"
      data-background-repeat: "no-repeat"
      data-background-color: "#213d4f"
      data-background-opacity: "0.25"
      data-background-size: "45%"
---

## {.center background-color="#2c3e50"}

::: {.text-xl}
**Ever open a dashboard with 18 filters across 6 tabs...<br>
and wonder where to even start?**
:::

:::: {.columns}
::: {.column width="45%" .fragment}
<div class="tenor-gif-embed" data-postid="596341483704119392" data-share-method="host" data-aspect-ratio="1.32447" data-width="350px"><a href="https://tenor.com/view/monkey-computer-work-bug-developer-gif-596341483704119392">Monkey Computer GIF</a>from <a href="https://tenor.com/search/monkey-gifs">Monkey GIFs</a></div> <script type="text/javascript" async src="https://tenor.com/embed.js"></script>
:::

::: {.column width="45%" .fragment}
<div class="tenor-gif-embed" data-postid="17038619" data-share-method="host" data-aspect-ratio="1.32447" data-width="350px"><a href="https://tenor.com/view/ron-swanson-parks-and-recreation-parks-and-rec-computer-dumpster-gif-17038619">Ron Swanson Parks And Recreation GIF</a></div> <script type="text/javascript" async src="https://tenor.com/embed.js"></script>
:::
::::

::: {.notes}
- 10 seconds
- Ever open a dashboard with 18 filters across 6 separate tabs...and try to figure out where to even start?
- I mean, that's a lot of data and different ways slicing it to get a full understanding of what's going on...so what do you do?
- That is...if you haven't made your career out of exploring data sets like most executives making decisions...what do you do?
- [CLICK] Maybe you do something like this monkey....just start clicking randomly hoping something sticks
- [PAUSE]
- [CLICK] Or maybe your feelings are a a little bigger...
- I get the feeling I'm not the only one who's been here before
:::

## Dashboard Support Group {background-color="#2c3e50"}

:::: {.columns}
::: {.column width="50%"}
### Raise hand if you've ever: {style="color: var(--teal-light) !important;"}
- Designed a UI with 10+ filters?
- Had a user ask for "one more dropdown"?
- Built a Shiny app with more `selectInput()` than insights?
:::

::: {.column width="50%" .center}
### Welcome! You're among friends 😊 {style="color: var(--coral-light) !important;"}

*Think of our time together as a little therapy session for dropdown overload*
:::

::: {.column width="50%" style="margin-top: var(--space-8);" .fragment}
### 👋 Hi, I'm Jeremy! {style="color: var(--indigo-light) !important;"}

**I'm a psychologist by training, but probably not the kind you're thinking of**

*Contrary to popular belief, most psychologists work with data. Not clients.*
:::

::: {.column width="50%" style="margin-top: var(--space-8);" .fragment .center}
### My Journey {style="color: var(--indigo-light) !important;"}

**Applied Social Psychology** → <br>
**Full Stack Engineer** → <br>
**Led Shiny teams at scale** → <br>
**Created {bidux} package**
:::
::::

::: {.notes}
- 45 seconds
- Quick show of hands...who's created a user interface with more than 10 filters?
- Or if ever had a client/user ask for "just one more dropdown"
- Or built a Shiny app with more `selectInput()`s than insights
- [CLICK] If so...welcome you to my dashboard support group
- Think of our time together today as a little therapy session for dropdown overload
- [PAUSE] Hi, I'm Jeremy! I'm a psychologist by training...but not the kind you're thinking of!
- Contrary to popular belief...there are many types of psychologists...and most of us with data
- Using it to studying behavior patterns...not doing individual therapy
- PhD in Applied Psych...studied how people/groups process information and make decisions
- Transitioned from academia to industry...where I got involved leading Shiny teams at scale
- Have nearly 10 years experience building enterprise apps/dashboards folks actually use
- But it wasn't always that way...I've built MANY dashboards that flopped even though they were technically sound
    - All of these definitely apply to me
- This is what led to my core realization...
:::

## Core Realization {background-color="#5b6bbf"}

<!-- ::: {.insight-box style="margin-top: 300px !important;"}
"Most dashboard failures aren't technical. They're psychological."
::: -->

> "Most dashboard failures aren't technical. They're psychological."

::: {.notes}
- 15 seconds
- Most dashboard failures aren't technical, they're psychological
- That might sound obvious, but it's a critical distinction...and one that we as developers can also easily address in our workflows
- Let me show you what I mean...and how technically great products can still fail spectacularly
:::

## {background-image="img/ui-before.png" background-size="contain" background-position="right" background-color="#2c3e50"}

::: {.text-box-overlay-dark .absolute left="-150" bottom="165" .fragment}
### Real client. Real dashboard. Real problems.

- 18 filters across 6 tabs
- Every possible data view
- Zero user adoption

::: {.fragment}
**We ran telemetry for 30 days...**
:::

:::

::: {.notes}
- 45 seconds
- I worked with a client who had this 'comprehensive' dashboard
- Blinded here for confidentiality...but incredibly close to the actual design
- 18 filters, 6 tabs, every possible view, nearly zero adoption
- Why this matters: This represents thousands of developer hours and client budget wasted on technically perfect but psychologically broken software
- The client was frustrated bc they had spent months building this thing, but no one used it
- As developers, we can relate...we've all built features nobody uses
- But here's why this matters more than frustration:
    1. Technical debt from unused complexity compounds over time
    2. User abandonment patterns replicate across similar projects
    3. Without data-driven insights, we keep making the same UX mistakes
- [CLICK] So we ran telemetry for 30 days...
- This data changed everything about how we approached the dashboard design
:::

## Telemetry Revealed the Journey {background-color="#2c3e50"}

```{r}
#| echo: false
#| fig-width: 14
#| fig-height: 7
#| fig.align: "center"

library(ggplot2)
library(dplyr)

# Create telemetry data with journey visualization
telemetry_data <- data.frame(
  metric = factor(
    c(
      "Opened dashboard",
      "Clicked any filter",
      "Used >3 filters",
      "Found what they needed",
      "Came back next day"
    ),
    levels = c(
      "Opened dashboard",
      "Clicked any filter",
      "Used >3 filters",
      "Found what they needed",
      "Came back next day"
    )
  ),
  percentage = c(100, 35, 18, 8, 12),
  dropoff = c(0, 65, 17, 10, -4)
)

ggplot(telemetry_data, aes(x = metric, y = percentage)) +
  geom_col(
    fill = c("#27ae60", "#e74c3c", "#c0392b", "#a93226", "#e74c3c"),
    width = 0.7
  ) +
  geom_text(
    aes(label = paste0(percentage, "%")),
    vjust = -0.5,
    size = 10,
    fontface = "bold",
    # color = "white"
  ) +
  geom_segment(
    aes(
      x = as.numeric(metric) - 0.35,
      xend = as.numeric(metric) + 0.35,
      y = percentage,
      yend = percentage
    ),
    # color = "white",
    size = 1,
    alpha = 0.3
  ) +
  labs(
    subtitle = "1,847 sessions tracked over 30 days",
    x = "",
    y = "Percentage of Users"
  ) +
  theme_minimal(base_size = 20) +
  theme(
    # plot.background = element_rect(fill = "#e74c3c", color = NA),
    # panel.background = element_rect(fill = "#e74c3c", color = NA),
    plot.title = element_text(size = 36, face = "bold"),
    plot.subtitle = element_text(size = 24),
    axis.text.x = element_text(
      size = 16,
      angle = 25,
      hjust = 1
    ),
    axis.text.y = element_text(size = 18),
    # axis.title = element_text(color = "white"),
    panel.grid = element_blank()
  ) +
  ylim(0, 110)
```

::: {.fragment .text-xl style="text-align: center"}
**92% of users failed to find what they needed**
:::

::: {.notes}
- 45 seconds
- Look at this journey of despair
- 100% open, only 35% click anything
- Only 8% succeed in finding what they needed
- And we didn't collected data on this..but I would hypothesize that many of those folks were a bit more data savvy and just knew where to look
- [CLICK] Overall...this was essentially 92% failure rate on a product that cost the client thousands of dollars to build
- This is behavioral science **screaming** at us that something is wrong here
:::

## Enter: Behavioral Science {background-color="#5b6bbf"}

::: {.text-large}
**What is it?** The interdisciplinary study of how people *actually* make decisions<br>
(Spoiler: irrationally, yet predictably & consistently)
:::

::: { style="margin-top: var(--space-7);"}
:::: {.columns}
::: {.column width="45%" .fragment}
### Classic Example: The Paradox of Choice {style="color: var(--coral-light) !important;"}

::: {.text-large}
- **Researchers**: Sheena Iyengar & Mark Lepper
- **Setting**: Upscale grocery store sampling booth
- **Design**: 24 jams vs. 6 jams display
- **Key Finding**: More choice attracted browsers but paralyzed buyers
:::
:::

::: {.column width="45%" .fragment}
### Study Results {style="color: var(--teal-light) !important;"}

![](img/jam-study.png){width="100%" style="border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.15);"}
:::
::::
:::

::: {.fragment .center style="color: var(--coral); font-weight: 600; margin-top: 30px;"}
**10x higher conversion with fewer options**
:::

::: {.notes}
- 1 minute
- Behavioral science studies how people think, feel, and act...often in the context of decision making
- Surprise...we're not rational...but we are still predictable and fairly consistent when we pay attention to the right drivers
- Let me show you a classic example that mirrors our dashboard problem...Sheena Iyengar & Mark Lepper’s famous jam study at Columbia
- They studied people in the field at a fancy grocery store...think Whole Foods or Trader Joe's
- These shoppers walked by a display stand with either 24 jams...(extensive choice condition)...or 6 jams (limited choice condition)
- More choice drew people in...60% stopped at the big display vs. 40% at the small one
- But fewer choices drove action...nearly 30% bought jam after the 6-jam booth, compared to only 3% after the 24-jam booth
- More choice attracted browsers...but paralyzed buyers
- So what do we learn from this?
    - Too many options look appealing but kill follow-through...exactly what happens with dashboards overloaded with filters
:::

## Applied to Dashboards {background-color="#5b6bbf"}

:::: {.columns}
::: {.column width="45%"}
### Core Concepts {style="color: var(--coral-light) !important;"}

- **Cognitive Load**
    - Too many choices overwhelm users' mental capacity
- **Progressive Disclosure**
    - Reveal complexity gradually as users need it
- **Framing Effects**
    - Same data can tell completely different stories
- **Choice Architecture**
    - Guide decisions without restricting options
:::

::: {.column width="45%" .fragment}
### Dashboard Examples {style="color: var(--teal-light) !important;"}

- **Cognitive Load**
    - Start with 3 key filters, hide 15 advanced ones behind "More Options"
- **Progressive Disclosure**
    - Show summary → drill to details → reveal comparisons
- **Framing Effects**
    - "Revenue up 15%" vs "Revenue missed target by 5%"
- **Choice Architecture**
    - Smart defaults, logical grouping, visual hierarchy
:::
::::

::: {.notes}
- 30 seconds
- Now the paradox of choice is just one of many behavioral science concepts that directly apply to dashboards
- [CLICK] Let me show you specific examples of how these apply
- Cognitive Load: Instead of 18 filters overwhelming users, start with 3 essential ones and hide advanced options
- Progressive Disclosure: Show high-level KPIs first, then let users drill into details, then comparisons
- Framing Effects: The same revenue number can be "up 15%" or "missed target by 5%" - completely different user reactions
- Choice Architecture: Smart defaults, logical grouping, visual hierarchy guides users naturally
- These aren't just theories...they're actionable engineering principles
:::

## The Solution: Your Dashboard Journey {background-color="#2c3e50"}

:::: {.columns}
::: {.column width="30%"}
![](img/vw-bus.jpg){.r-stretch}

### Think of it like a road trip

📍 **Interpret** where you're going<br>
⚠️ **Notice** the warning lights<br>
🌦️ **Anticipate** weather changes<br>
🗺️ **Structure** the best route<br>
✅ **Validate** safe arrival
:::

::: {.column width="70%" .fragment}
### The BID Framework

📍 **Interpret** user needs<br>
⚠️ **Notice** friction points<br>
🌦️ **Anticipate** cognitive biases<br>
🗺️ **Structure** information flow<br>
✅ **Validate** understanding

::: {.fragment}
![](img/bid-framework.png){style="box-shadow: none !important; width: 100%;"}
:::
:::
::::

::: {.notes}
- 45 seconds
- Think of building dashboards like you would a road trip
- reference grateful dead fans....people are a long strange trip joke here (related to journey theme; it's a brief point to implicitly reference the VM road image on the slide, and sets them up for understanding the hex logo imagery by the end of the talk)
- You need to interpret where you're going, notice warning lights...
- [CLICK] "This is the BID framework"
- [CLICK] "Five *iterative* stages to prevent dashboard disasters"
- Like any good road trip, it's not just about the destination...it's about having the right framework to explore and discover along the way
:::

## What is {bidux}? {background-color="#2c3e50"}

:::: {.columns}
::: {.column width="45%" .text-large}
An R package that:

- ✅ Works with ANY Shiny dashboard
- ✅ Analyzes telemetry OR works without
- ✅ Auto-suggests behavioral science improvements
- ✅ Custom parameter overrides
:::

::: {.column width="45%" .fragment .text-xl style="text-align: center; margin-top: 30px;"}
*Your behavioral scientist in the console*
:::
::::

::: {.notes}
- 30 seconds
- "bidux is your behavioral scientist in the console"
- "Works with any Shiny app, telemetry optional, auto-suggests improvements"
- [CLICK] "Think of it as your behavioral scientist in the console"
:::

## INTERPRET: Start with Why {background-color="#5b6bbf"}

```{r}
#| code-line-numbers: "|3-5|6-10|11-17"
library(bidux)

interpret_stage <- bid_interpret(
  central_question = "Which markets are driving performance?",
  data_story = list(
    hook = "Q4 revenue hit record high, but satisfaction dipped",
    context = "After aggressive marketing across all regions",
    tension = "West region satisfaction fell 10 points",
    resolution = "Focus retention efforts on underperforming regions"
  ),
  user_personas = list(
    list(
      name = "Product Manager",
      goals = "Monitor weekly KPIs",
      pain_points = "Too many filters to find important insights",
      technical_level = "Moderate"
    )
  )
)
```

::: {.notes}
- 1 minute
- "Start with why - what question does this dashboard answer?"
- [CLICK] First highlight: central_question - this drives everything else
- [CLICK] Second highlight: data_story - this creates narrative structure
- [CLICK] Third highlight: user_personas - this grounds design in real needs
- Why this matters for your daily work: Clear purpose drives every technical decision you make
- Most devs think they do this, but telemetry says otherwise. We jump straight to technical implementation
- The cost: Every filter you add without purpose increases cognitive load exponentially
- This isn't just UX theory - it's engineering efficiency. When you clarify purpose first:
    1. You write less code because you know what to exclude
    2. Your data queries are more focused and performant
    3. User testing becomes objective rather than subjective
    4. You can defend design decisions with evidence, not opinions
- `bid_interpret` creates a structured object that feeds into later stages, making behavioral science actionable in your R workflow
- Think of it as writing better requirements that actually connect to user psychology
:::

## NOTICE: Find the Core Problems {background-color="#5b6bbf"}

:::: {.columns}
::: {.column width="45%"}
```{r}
#| echo: false
#| fig-width: 6
#| fig-height: 8

library(ggplot2)

# Enhanced heatmap
filters <- data.frame(
  filter = factor(
    paste("Filter", 1:18),
    levels = rev(paste("Filter", 1:18))
  ),
  usage = c(82, 78, 71, 12, 8, 6, 5, 3, 3, 2, 2, 1, 1, 1, 0, 0, 0, 0)
)

ggplot(filters, aes(x = 1, y = filter, fill = usage)) +
  geom_tile(color = "white", size = 1) +
  geom_text(
    aes(label = paste0(usage, "%")),
    size = 5, fontface = "bold",
    color = ifelse(filters$usage > 40, "white", "black")
  ) +
  scale_fill_gradient2(
    low = "#fee5d9", mid = "#fc9272", high = "#a50f15",
    midpoint = 40, guide = "none"
  ) +
  labs(
    title = "Filter Usage Reality",
    subtitle = "14 of 18 filters basically ignored",
    x = "", y = ""
  ) +
  theme_minimal(base_size = 14) +
  theme(
    axis.text.x = element_blank(),
    axis.ticks = element_blank(),
    panel.grid = element_blank(),
    plot.title = element_text(size = 20, face = "bold"),
    plot.subtitle = element_text(size = 16, color = "#666")
  )
```
:::

::: {.column width="55%"}
```{r}
#| code-line-numbers: "|2-6|8"
# Minimal input → Maximum insight
notice_stage <- bid_notice(
  previous_stage = interpret_stage,
  problem = "Users are struggling to find key insights",
  evidence = "Users report confusion and telemetry shows low engagement"
)

summary(notice_stage)
```
:::
::::

::: {.notes}
- 1 minute
- Notice finds the concepts behind the friction points
- Why this stage matters for developers...It turns user complaints into actionable engineering insights
- Look at this heatmap...14 filters basically going unused...4 are completely ignored
- This isn't just usage data...it's technical debt visualization
- What this means for your codebase:
    1. Those unused filters are maintenance overhead with zero ROI
    2. Database queries could be running for features nobody touches
    3. UI complexity is slowing rendering times without value
    4. Future feature requests will compound these problems over time
- `bid_notice` auto-suggests behavioral theories to explain patterns...or power users can override them with specific concepts
- This transforms "users don't like it" into "choice overload is killing task completion"
- Now you have a specific problem to solve with code
:::

## ANTICIPATE: Guard Against Biases {background-color="#5b6bbf"}

:::: {.r-stack}
```{r}
anticipate_stage <- bid_anticipate(previous_stage = notice_stage)

# Auto-generates bias mitigations
summary(anticipate_stage)
```

![](img/ui-gain-frame.png){.fragment}

![](img/ui-loss-frame.png){.fragment}

::: {.text-box-overlay-dark .fragment}
**Same Data, Different Story**
:::
::::

::: {.notes}
- 1 minute
- "Anticipate cognitive biases"
- "Same data tells different stories"
- "Marketing sees progress, Finance sees gap"
- "bidux auto-generates these guards"
- "Framing changes everything"
:::

## STRUCTURE: Progressive Disclosure {background-color="#5b6bbf"}

```{r}
structure_stage <- bid_structure(previous_stage = anticipate_stage)

# Provides suggestions how how to implement
summary(structure_stage)
```

::: {.fragment}
![](img/f-pattern-heatmap.png){.absolute bottom="50" right="100" width="650"}
:::

::: {.notes}
- 1.5 minutes
- "Structure provides implementation roadmap"
- "Specific code recommendations"
- "Progressive disclosure reduces cognitive load"
- [CLICK] "Follow natural eye patterns"
:::

## VALIDATE: Plain Language Wins {background-color="#5b6bbf"}

```{r}
validate_stage <- bid_validate(previous_stage = structure_stage)

# Generates validation checklist
summary(validate_stage)
```

::: {.fragment}
![](img/ui-summary.png){.absolute bottom="50" right="100" width="650"}
:::

::: {.notes}
- 1 minute
- "Validate ensures understanding"
- "Plain language summaries"
- "Auto-generates checklist"
:::

## The Complete Workflow {background-color="#2c3e50"}

::: {.panel-tabset}

### With Telemetry

```{r}
#| code-line-numbers: "|1-2|4-8|10"
# Load and analyze existing usage data
issues <- bid_telemetry("dashboard_telemetry.sqlite")
count(issues, severity, sort = TRUE)

report <- bid_interpret(central_question = "What do users need first?") |>
  bid_notice_issue(issues[1, ]) |> # bridge from telemetry to BID
  bid_anticipate() |>
  bid_structure() |>
  bid_validate() |>
  bid_report(format = "html", include_diagrams = TRUE)
```

### Without Telemetry

```{r}
#| code-line-numbers: "|1-5|6-9|10"
report <- bid_interpret(central_question = "What do users need first?") |>
  bid_notice(
    problem = "Too many filters, unclear defaults",
    evidence = "User feedback and slow engagement"
  ) |>
  bid_anticipate() |>
  bid_structure() |>
  bid_validate() |>
  bid_report(format = "text", include_diagrams = FALSE)
```

:::

::: {.notes}
- 1 minute
- "Complete workflow in one pipe - works with or without telemetry"
- [CLICK] With Telemetry tab first:
- [CLICK] First highlight: Load and analyze existing data
- [CLICK] Second highlight: The 5-stage BID pipeline
- [CLICK] Third highlight: Generate report
- [CLICK] Without Telemetry tab:
- [CLICK] First highlight: Manual problem definition
- [CLICK] Second highlight: Same 5-stage pipeline
- [CLICK] Third highlight: Text output for tickets/PRs
- bid_telemetry() provides a tidy tibble of issues compatible with dplyr
- bid_notice_issue() is the bridge from a single issue to a BID Notice stage
- The 5-stage chain culminates in bid_report(), which can produce text, HTML, or markdown
- Output is a concise report you can paste into PRs or tickets
- "Everything you need to fix your dashboard"
:::

## The Transformation {.center background-color="#2c3e50"}

:::: {.r-stack}

![](img/ui-before.png)

![](img/ui-after.png){.fragment}

::: {.text-box-overlay-dark .fragment}
| Metric          | Before     | After              |
|---------------- |:---------: |:------------------:|
| Filters         | 18         | 3 (+15 advanced)   |
| Success Rate    | 8%         | 85%                |
| Time to Insight | 258s       | 45s                |
| Return Rate     | 12%        | 67%                |

::: {.fragment .text-xl style="margin-top: 30px;"}
**Same data. Same goals. 10x better outcomes.**
:::
:::
::::

::: {.notes}
- 45 seconds
- "Before: 18 filters, 8% success"
- "After: 3 smart filters, 85% success"
- [CLICK] "Same data, 10x better outcomes"
:::

## Real Impact Across Industries {background-color="#5b6bbf"}

```{r}
#| echo: false
#| fig-width: 14
#| fig-height: 7

library(ggplot2)
library(tidyr)

# Enhanced metrics visualization
metrics <- data.frame(
  Metric = factor(
    c("Time to Insight", "Task Completion", "User Satisfaction", "Return Rate"),
    levels = c(
      "Time to Insight",
      "Task Completion",
      "User Satisfaction",
      "Return Rate"
    )
  ),
  Before = c(258, 35, 32, 12),
  After = c(45, 85, 78, 67),
  Industry = c("All", "All", "All", "All")
)

metrics_long <- metrics |>
  pivot_longer(cols = c(Before, After), names_to = "State", values_to = "Value")

# Calculate improvements
metrics_long$Improvement <- ifelse(
  metrics_long$State == "After",
  round((metrics_long$Value / metrics$Before - 1) * 100),
  NA
)

ggplot(metrics_long, aes(x = Metric, y = Value, fill = State)) +
  geom_col(position = "dodge", width = 0.7) +
  geom_text(
    aes(
      label = ifelse(
        Metric == "Time to Insight",
        paste0(Value, "s"),
        paste0(Value, "%")
      )
    ),
    position = position_dodge(width = 0.7),
    vjust = -0.5, size = 8, fontface = "bold") +
  geom_text(
    data = subset(metrics_long, State == "After" & !is.na(Improvement)),
    aes(label = paste0("+", abs(Improvement), "%"), y = Value + 10),
    position = position_dodge(width = 0.7),
    vjust = -0.5, size = 6, color = "#27ae60", fontface = "italic") +
  scale_fill_manual(values = c("Before" = "#e74c3c", "After" = "#27ae60")) +
  labs(
    title = "BID Framework Impact: 12 Enterprise Deployments",
    subtitle = "Average improvements across healthcare, finance, and retail sectors",
    y = ""
  ) +
  theme_minimal(base_size = 20) +
  theme(
    legend.position = "top",
    legend.text = element_text(size = 24),
    legend.title = element_blank(),
    plot.title = element_text(size = 32, face = "bold"),
    plot.subtitle = element_text(size = 24),
    axis.text = element_text(size = 20),
    axis.title = element_blank(),
    panel.grid.major.x = element_blank()
  ) +
  ylim(0, max(metrics_long$Value) * 1.2)
```

::: {.notes}
- 30 seconds
- "Real results from 12 enterprise deployments"
- Why these metrics matter for your engineering career:
    1. 82% reduction in time to insight = users find value faster = better adoption metrics for your projects
    2. 143% improvement in task completion = fewer support tickets = less maintenance overhead
    3. These improvements compound: happy users request thoughtful features, not band-aid fixes
- "This works across industries" - the psychological principles are universal, but implementation adapts to your specific R/Shiny tech stack
- Bottom line: Better user psychology = better engineering outcomes = more impactful projects in your portfolio
:::

## Your Turn: Start Today {.center background-color="#5b6bbf"}

:::: {.columns}
::: {.column width="65%"}
```{r}
#| eval: false

# Install from CRAN
install.packages("bidux")
library(bidux)

# Quick diagnosis without telemetry
result <- bid_interpret("What do users need?") |>
  bid_notice(
    problem = "Death by dropdown",
    evidence = "User complaints"
  ) |>
  bid_anticipate() |>
  bid_structure() |>
  bid_validate()

# View structure recommendations
result$suggestions

# Learn specific concepts (fuzzy matching works!)
bid_concepts("choice overload")

# Get your next steps
result$next_steps
```
:::

::: {.column width="35%" .fragment}
### Resources:
- 🔬 **BID Framework**: [github.com/jrwinget/bid-framework](https://github.com/jrwinget/bid-framework)
- 📚 **{bidux} Docs**: [github.com/jrwinget/bidux](https://github.com/jrwinget/bidux)
- 💬 **Community**: [github.com/jrwinget/bidux/discussions](https://github.com/jrwinget/bidux/discussions)
- 🤝 **Let's Connect!**
  - <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-bluesky" viewBox="0 0 16 16">
  <path d="M3.468 1.948C5.303 3.325 7.276 6.118 8 7.616c.725-1.498 2.698-4.29 4.532-5.668C13.855.955 16 .186 16 2.632c0 .489-.28 4.105-.444 4.692-.572 2.04-2.653 2.561-4.504 2.246 3.236.551 4.06 2.375 2.281 4.2-3.376 3.464-4.852-.87-5.23-1.98-.07-.204-.103-.3-.103-.218 0-.081-.033.014-.102.218-.379 1.11-1.855 5.444-5.231 1.98-1.778-1.825-.955-3.65 2.28-4.2-1.85.315-3.932-.205-4.503-2.246C.28 6.737 0 3.12 0 2.632 0 .186 2.145.955 3.468 1.948"/></svg> [@jrwinget](https://bsky.app/profile/jrwinget.bsky.social)
  - <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-linkedin" viewBox="0 0 16 16">
  <path d="M0 1.146C0 .513.526 0 1.175 0h13.65C15.474 0 16 .513 16 1.146v13.708c0 .633-.526 1.146-1.175 1.146H1.175C.526 16 0 15.487 0 14.854zm4.943 12.248V6.169H2.542v7.225zm-1.2-8.212c.837 0 1.358-.554 1.358-1.248-.015-.709-.52-1.248-1.342-1.248S2.4 3.226 2.4 3.934c0 .694.521 1.248 1.327 1.248zm4.908 8.212V9.359c0-.216.016-.432.08-.586.173-.431.568-.878 1.232-.878.869 0 1.216.662 1.216 1.634v3.865h2.401V9.25c0-2.22-1.184-3.252-2.764-3.252-1.274 0-1.845.7-2.165 1.193v.025h-.016l.016-.025V6.169h-2.4c.03.678 0 7.225 0 7.225z"/></svg> [@jrwinget](https://www.linkedin.com/in/jrwinget/)
  - 📧 [contact@jrwinget.com](mailto:contact@jrwinget.com)
:::
::::

::: {.notes}
- 30 seconds
- "Install from CRAN today"
- "Works immediately without telemetry"
- [CLICK] "Resources available"
- These slides will be in the BID framework repo...and I'll post them on my website as well
- "Join the community" and feel free to connect with me on Bluesky, LinkedIn, or email
:::

## One Thing to Remember {background-color="#2c3e50"}

:::: {.columns .center}
::: {.column width="20%"}
![](img/hex-bidux.png){style="box-shadow: none !important; border: none !important; margin-top: 50px;"}
:::

::: {.column width="40%" .text-display style="margin-top: 200px;"}
**Dashboards don't need more features.**<br>
**They need fewer obstacles.**

::: {.fragment .text-xl style="margin-top: 50px"}
Let's fix that together!
:::
:::

::: {.column width="20%" .fragment}
*Special thanks to posit::conf organizers,<br>
the Shiny community,<br>
and all of you for caring about your users*
:::
::::


::: {.notes}
- 20 seconds
- Dashboards don't need more features
- They need fewer obstacles
- [CLICK] "Let's fix that together"
- [CLICK] Special thanks to the posit::conf organizers...the Shiny community...and all of you for caring about your users
- "Questions?"
:::
