---
title: "Death by Dropdown? Engineer Insightful Shiny Apps with Behavioral Science"
author: "Jeremy Winget, PhD"
execute:
  echo: true
format:
  revealjs:
    theme: default
    slide-number: true
    transition: fade
---

## The Problem {.center background-color="#4682b4"}

::: {.large}
**Ever open a dashboard, see 18 filters across 6 tabs, and then...close your laptop?**
:::

::: {.fragment .large}
**Or just get the urge to...**

<div class="tenor-gif-embed" data-postid="17038619" data-share-method="host" data-aspect-ratio="1.77778" data-width="100%"><a href="https://tenor.com/view/ron-swanson-parks-and-recreation-parks-and-rec-computer-dumpster-gif-17038619">Ron Swanson Parks And Recreation GIF</a>from <a href="https://tenor.com/search/ron+swanson-gifs">Ron Swanson GIFs</a></div> <script type="text/javascript" async src="https://tenor.com/embed.js"></script>
:::

::: {.notes}
:::

## Quick Show of Hands üôã {.center background-color="#34495e"}

::: {.incremental}
- Who's built a Shiny app with 10+ filters?
- Who's had a user ask for "just one more dropdown"?
- Who's dashboard has more `selectInput()` than actual insights?
:::

::: {.fragment}
**Welcome to my impromptu Dashboard Support Group. You're among friends.** üòÖ
:::

::: {.notes}
- Confession time...
- Who's built a one of those dashboards? ...me
- Who's been forced to build one bc the client just kept asking for one more filter? ...me
- Who's ever used selectInput more than they probably should have? ...me
- You're not alone!
:::

## Why Me? {background-color="#2c3e50"}

:::: {.columns}
::: {.column width="60%"}
### Applied Social Psychologist ‚Üí Full-Stack Engineer

- **PhD in Applied Psychology** studying how people process information
- **Led Shiny teams** at scale, providing enterprise dashboards
- **Core insight:** Most dashboard failures aren't technical, they're psychological
:::

::: {.column width="40%"}
::: {.fragment}
*"As a behavioral scientist in the tech world, I've seen firsthand how a dash of psychology can rescue users from that feeling of **'death by dropdown'"***
:::
:::
::::

## Your Dashboard = A Road Trip üöó {.center}

:::: {.columns}
::: {.column width="50%"}
### You wouldn't make a long drive without:
- **I**nterpreting travel guides
- **N**oticing any mechanical problems
- **A**nticipating roadblocks ahead
- **S**tructuring the best route
- **V**alidating everyone arrived happy
:::

::: {.column width="50%"}
::: {.fragment}
### So why build dashboards without:
- **I**nterpreting user needs
- **N**oticing friction points
- **A**nticipating behavior
- **S**tructuring a journey
- **V**alidating understanding
:::
:::
::::

::: {.notes}
- 20 seconds
- "This is the BID framework"
- Transition: "Let me show you the GPS"
:::

## The BID Framework: Your GPS for Dashboard Design

![](img/bid-framework.png)

**Remember - "Interfaces Need A Smart Vision"**

::: {.fragment}
**Behavioral Insight Design (BID)**: *Not just UX advice - it's behavioral science in your dev workflow*
:::

::: {.notes}
- 30-45 seconds MAX
- "Today we focus on the middle three - where psychology transforms dashboards"
- Quick transition to stages
:::

## BEFORE: A Familiar Nightmare

![](img/ui-before.png)

::: {.incremental}
- 18 filters ‚Ä¢ 6 tabs ‚Ä¢ no story ‚Ä¢ all data
- **User reaction:** "Where do I even start?"
- **Result:** 65% abandon rate in first 30 seconds
:::

## Every Dev's First Dashboard

![](img/this-is-fine.jpg)<br>
*"But it has ALL the features!"*

## INTERPRET: Plan Your Destination üó∫Ô∏è {background-color="#4682b4"}

```{r, interpret-stg}
library(dplyr)
library(bidux)

# Define the destination and goals
interpret_stage <- bid_interpret(
  central_question = "Which markets are driving performance, and where are we lagging?",
  data_story = list(
    hook = "Q4 revenue hit record high, but satisfaction dipped",
    context = "After aggressive marketing across all regions",
    tension = "West region satisfaction fell 10 points",
    resolution = "Focus retention efforts on underperforming regions"
  ),
  user_personas = list(
    list(
      name = "Product Managers",
      goals = "Monitor weekly KPIs",
      pain_points = "Too many filters to find important insights",
      technical_level = "Moderate"
    ),
    list(
      name = "Executives",
      goals = "Review quarterly trends",
      pain_points = "Overwhelmed by data, need clear takeaways",
      technical_level = "Basic"
    )
  )
)

summary(interpret_stage)
```

::: {.fragment}
**Key insight:** If you can't write the question in 10 words, users won't find answers in 100 filters
:::

::: {.notes}
- 1.5 minutes TOTAL for Interpret
- "You think you do this, but telemetry says otherwise"
- "Most jump straight to filters"
- Transition: "But here's what you're missing..."
:::

## NOTICE: The Warning Lights You're Ignoring ‚ö†Ô∏è {background-color="#e74c3c"}

:::: {.columns}
::: {.column width="50%"}
![](img/telemetry-heatmap.png)
:::

::: {.column width="50%"}
![](img/telemetry-sessions.png)
:::
::::

::: {.incremental}
- **Your assumption:** "They need all 18 filters"
- **Reality:** 82% use only 3 filters
- **Hidden cost:** 4.3 minutes to first click
:::

::: {.notes}
- START 3-minute NOTICE section
- "This is where behavioral science starts"
:::

## NOTICE: What Telemetry Reveals

```{r, telemetry-data}
#| echo: false

conn_telemetry_db <- function(db_path = "telemetry.sqlite") {
  # Create SQLite database with telemetry data
  con <- DBI::dbConnect(RSQLite::SQLite(), db_path)

  set.seed(456)
  n_sessions <- 1000

  # Create telemetry events with proper columns expected by bid_telemetry
  events <- data.frame()

  for(i in 1:n_sessions) {
    session_id <- paste0("session_", i)
    user_id <- paste0("user_", sample(1:200, 1))
    session_start <- Sys.time() - runif(1, 0, 30*24*60*60)  # Random time in last 30 days
    session_duration <- rexp(1, rate = 1/260)  # avg 4.3 minutes

    # Navigation events (page views)
    visited_tabs <- sample(
      c("Revenue Analysis", "Customer Insights", "Operations",
        "Product Performance", "Marketing Analytics", "Executive Summary"),
      sample(1:3, 1),
      prob = c(0.35, 0.25, 0.15, 0.10, 0.10, 0.05)
    )

    for(tab in visited_tabs) {
      events <- rbind(events, data.frame(
        timestamp = format(session_start + runif(1, 0, session_duration), "%Y-%m-%d %H:%M:%S"),
        session_id = session_id,
        user_id = user_id,
        event_type = "navigation",
        navigation_id = tab,
        input_id = NA,
        value = NA,
        error_message = NA,
        output_id = NA,
        stringsAsFactors = FALSE
      ))
    }

    # Input interaction events
    all_inputs <- c(
      "year", "quarter", "region",  # Used by 82%
      "rev_product", "rev_category", "rev_channel",
      "cust_segment", "cust_source", "cust_campaign",
      "ops_team", "ops_priority", "ops_status",
      "prod_product", "prod_compare",
      "mkt_campaign", "mkt_channel",
      "exec_metric", "exec_view"
    )

    if(runif(1) < 0.82) {
      # 82% use only first 3 filters
      used_inputs <- sample(all_inputs[1:3], sample(1:3, 1))
    } else {
      # 18% use additional filters
      n_filters <- sample(4:10, 1)
      used_inputs <- sample(all_inputs, n_filters)
    }

    for(input in used_inputs) {
      events <- rbind(events, data.frame(
        timestamp = format(session_start + runif(1, 0, session_duration), "%Y-%m-%d %H:%M:%S"),
        session_id = session_id,
        user_id = user_id,
        event_type = "input",
        navigation_id = NA,
        input_id = input,
        value = sample(c("Option1", "Option2", "All"), 1),
        error_message = NA,
        output_id = NA,
        stringsAsFactors = FALSE
      ))
    }

    # Error events (31% misinterpretation rate)
    if(runif(1) < 0.31) {
      error_messages <- c(
        "Filter combination produced no results",
        "Chart rendering failed",
        "Incorrect time period selected",
        "Data not available for selection"
      )

      events <- rbind(events, data.frame(
        timestamp = format(session_start + runif(1, 60, session_duration), "%Y-%m-%d %H:%M:%S"),
        session_id = session_id,
        user_id = user_id,
        event_type = "error",
        navigation_id = NA,
        input_id = NA,
        value = NA,
        error_message = sample(error_messages, 1),
        output_id = sample(c("revenuePlot", "satisfactionPlot", "revenueTable"), 1),
        stringsAsFactors = FALSE
      ))
    }

    # Login event at session start
    events <- rbind(events, data.frame(
      timestamp = format(session_start, "%Y-%m-%d %H:%M:%S"),
      session_id = session_id,
      user_id = user_id,
      event_type = "login",
      navigation_id = NA,
      input_id = NA,
      value = NA,
      error_message = NA,
      output_id = NA,
      stringsAsFactors = FALSE
    ))
  }

  # Sort events by timestamp
  events <- events[order(events$timestamp), ]

  # Write to SQLite database
  DBI::dbWriteTable(con, "events", events, overwrite = TRUE)

  DBI::dbDisconnect(con)

  return(db_path)
}
```

```{r, notice-stg}
# Using production telemetry
telemetry_path <- conn_telemetry_db("dashboard_telemetry.sqlite")

# bid_telemetry automatically categorizes and prioritizes issues!
issues <- bid_telemetry(telemetry_path)
head(issues)

# if we have telemetry, let bidux convert issues to Notice stages
critical_issues <- issues |>
  filter(severity == "critical") |>
  slice_head(n = 3)

notices <- bid_notices(
  issues = critical_issues,
  previous_stage = interpret_stage
)

notice_stage <- notices[[1]]

# Using observations/feedback
notice_stage <- bid_notice(
  previous_stage = interpret_stage,
  problem = "Users overwhelmed by 18 filters across 6 tabs",
  evidence = "82% of sessions use only 3 filters; 4.3 min to first insight"
  # NOTE: No theory specified - bidux will suggest one!
)

summary(notice_stage)
```

::: {.fragment}
**The "Just One More Filter" Death Spiral:**

![](img/anakin.jpg)
:::

::: {.notes}
- "Telemetry is your behavioral microscope"
- "Every hover tells a story of confusion"
- Transition: "Now let's talk about what happens in their heads"
:::

## NOTICE: Cognitive Load Measurement

:::: {.columns}
::: {.column width="50%"}
### You're Measuring:
- Click-through rates
- Time on page
- Completions
:::

::: {.column width="50%"}
### You Should Measure:
- **Decision fatigue points**
- **Paradox of choice moments**
- **Cognitive overflow indicators**
:::
::::

::: {.notes}
- "This is behavioral science in action"
- End NOTICE section (3 min total)
- Transition: "Once you spot problems, anticipate how users will cope"
:::

## ANTICIPATE: Pack for Cognitive Weather üå¶Ô∏è {background-color="#f39c12"}

::: {.large}
**Users don't see data. They see stories.**
:::

![](https://media.giphy.com/media/l0IykOsxLECVejOzm/giphy.gif)

*Users interpreting your carefully crafted visualizations*

::: {.fragment}
*And they'll write their own story if you don't guide them*
:::

::: {.notes}
- START 3-minute ANTICIPATE section
- "This is pure psychology"
- So we need to prepare for cognitive detours
:::

## ANTICIPATE: The Biases You're Not Defending Against

:::: {.columns}
::: {.column width="50%"}
### Anchoring Bias

```{r}
#| eval: false

# Bad: First number sticks
valueBox(value = -5, subtitle = "Change")

# Good: Context first
valueBox(value = "+15% YTD", subtitle = "Despite -5 this week")
```
:::

::: {.column width="50%"}
### Framing Effects

```{r}
# Don't specify bias_mitigations - let {bidux} suggest them!
anticipate_stage <- bid_anticipate(
  previous_stage = notice_stage,
  # bias_mitigations = NULL,
  include_accessibility = TRUE
)
```
:::
::::

::: {.notes}
- "Small changes, massive perception shifts"
- "This is what behavioral scientists know that devs don't"
:::

## ANTICIPATE: Confirmation Bias Protection

<!-- ![](img/confirmation-bias-toggle.png) -->

::: {.fragment}
**Result:** 74% reduction in misinterpretation
:::

::: {.notes}
- "Protect users from themselves"
- End ANTICIPATE (3 min total)
- Transition: "Now structure the journey"
:::

## STRUCTURE: The Scenic Route üõ£Ô∏è {background-color="#16a085"}

![](img/oprah.jpg)

::: {.fragment}
**If everything's important, nothing is.**
:::

::: {.notes}
- START 3.5-minute STRUCTURE section
- "This is where psychology meets code"
:::

## STRUCTURE: The Behavioral Science Hierarchy

```{r}
flags <- bid_flags(issues)

structure_stage <- bid_structure(
  previous_stage = anticipate_stage,
  telemetry_flags = flags
)

structure_stage$suggestions
```

::: {.fragment}
### The F-Pattern Reading Path
![](img/f-pattern-heatmap.png)

*Place critical info where eyes naturally go*
:::

::: {.notes}
- "Structure IS the user experience"
- "Every pixel placement is a psychological choice"
- "Eye tracking shows F-pattern on dashboards"
- "Top-left = highest value real estate"
:::

## STRUCTURE: Smart Defaults from Telemetry

```{r}
all_suggestions <- c(
  interpret_stage$suggestions,
  notice_stage$suggestions,
  anticipate_stage$suggestions,
  structure_stage$suggestions
)

all_suggestions
```

::: {.fragment}
**Before:** User configures dashboard<br>
**After:** Dashboard anticipates user
:::

:::: {.columns}
::: {.column width="50%"}
### Before: Chaos
<!-- ![](img/ui-before.png) -->

- All options visible
- Competing for attention
- Analysis paralysis
:::

::: {.column width="50%"}
### After: Journey
<!-- ![](img/after-structured.png) -->

- Start with one question
- Reveal complexity gradually
- Cognitive scaffolding
:::
::::

::: {.notes}
- End STRUCTURE (3.5 min total)
- Transition: "Quick validation check"
:::

## VALIDATE: Confirm Safe Arrival ‚úÖ {background-color="#27ae60"}

::: {.fragment}
![](img/ui-summary.png)

**The GPS moment:** "You've arrived at your insight"
:::

::: {.notes}
- 1.5 minutes TOTAL for Validate
- "Devs know summaries, but miss the psychology"
- "Plain language = cognitive relief"
- Transition: "Let's see the impact"
:::

## The Transformation: Proven Results üìä

:::: {.columns}
::: {.column width="50%"}
### Before BID
- 18 filters, 6 tabs
- 4.3 min to insight
- 65% abandonment
- 31% misinterpret data
:::

::: {.column width="50%"}
### After BID
- 3 smart filters
- 45 sec to insight (-82%)
- 85% completion (+143%)
- 8% misinterpret (-74%)
:::
::::

::: {.fragment}
### One Team's Story:
*"We thought users wanted more options. Telemetry showed they wanted more guidance. BID framework + {bidux} = 224% increase in weekly active users"*
:::

::: {.notes}
- 1.5 minutes for results
- "This isn't theory - it's production data"
- Transition: "Here's how to start"
:::

## Your Roadmap Forward üöÄ {.center background-color="#2c3e50"}

::: {.r-fit-text}
**"Interfaces Need A Smart Vision"**
:::

### This Week's Challenge:

1. **Install {bidux}:** `install.packages("bidux")`
2. **Run telemetry on ONE dashboard:** `bid_notice(telemetry = TRUE)`
3. **Share your before/after:** [@jrwinget](https://bsky.app/profile/jrwinget.bsky.social)

::: {.fragment}
**üéÅ First 5 transformations get free 1:1 dashboard review!**

<!-- ![QR for contact](img/qr-combined.png) -->
:::

::: {.notes}
- 1 minute close
- "No more death by dropdown!"
- "Questions?"
- Thank organizers
:::
