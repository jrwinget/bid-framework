---
title: "Death By Dropdown?"
subtitle: "A Developer's Guide To Building Dashboards That Won't Fry Your Client's Brain"
author: "Milena Eickhoff & Jeremy Winget, PhD"
format: 
  revealjs:
    theme: simple
    slide-number: true
    footer: "ShinyConf 2025 | The BID Framework"
    incremental: true
    transition: slide
    background-transition: fade
    highlight-style: github
    code-block-background: true
---

## The Problem {.center background-color="#4682B4"}

:::: {.columns}
::: {.column width="60%"}
<h3>Ever felt like this?</h3>

- Endless dropdown menus
- Overwhelming complexity
- Users disengaged
- Delayed decision-making
- "Dashboard rot"
:::

::: {.column width="40%"}
![](https://media0.giphy.com/media/v1.Y2lkPTc5MGI3NjExbzVhM3d3MjJvYTNyc3puM2E0cmduZjFweXhrczNwcXI0b3FhN203aCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/l44Q5OXJ6qaNr838Q/giphy.gif)
:::
::::

## It Doesn't Have To Be This Way {.center}

<br>

::: {.r-fit-text}
By shifting the focus from <span style="color:#D55E00">**cramming data**</span> to <span style="color:#009E73">**crafting stories**</span>
:::

:::: {.columns .fragment}
::: {.column width="60%"}
<br>

SoundPulse's market research team was drowning in data, unable to extract meaningful insights from their complex dashboards.
:::

::: {.column width="40%"}
<br>

![](https://media2.giphy.com/media/v1.Y2lkPTc5MGI3NjExeXFwNHV6N3B4cmIzaTY3ajYwYTRkNG95ZWtxdjB5cTE1djRibGRydCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/xT0BKiK5sOCVdBUhiM/giphy.gif){width="90%"}
:::
::::

## BID In Action {.center background-color="#F0F0F0"}

::: {.r-fit-text}
**SoundPulse Market Research Dashboard Transformation**
:::

:::: {.columns}
::: {.column width="50%"}
### Before BID:
<!-- Dashboard with overwhelming filters and complex tables -->
![](img/before_bid_dashboard.png){width="95%"}

- 14 dropdown filters
- 8 tabs of dense data tables
- No clear hierarchy of information
:::

::: {.column width="50%"}
### After BID:
<!-- Streamlined dashboard with clear information hierarchy -->
![](img/after_bid_dashboard.png){width="95%"}

- Guided narrative pathway
- Focused insights by segment
- Progressive disclosure of details
:::
::::

## The BID Framework {background-color="#E6F0FF"}

::: {.r-fit-text}
A 5-Stage Behavior Insight Design Framework
:::

:::: {.columns}
::: {.column width="60%"}
1. **Notice** the Problem
2. **Interpret** the User's Need
3. **Structure** the Dashboard
4. **Anticipate** User Behavior
5. **Validate** & Empower the User
:::

::: {.column width="40%"}
![The BID Framework](The_BID_framework.png)
::: 
::::

::: {.notes}
- This framework distills psychological principles into actionable steps
- Each stage builds on the previous one
- The framework is grounded in behavioral science, communication theory, and UX design
:::

## Where BID Fits In {background-color="#F0F0F0"}

::: {.nonincremental}
- Builds on established UX heuristics and theories
- Incorporates data storytelling frameworks
- Systematically integrates cognitive bias mitigation
- Cross-disciplinary synthesis (UX, data viz, behavioral economics)
- Stage-based process rather than heuristic lists
- Specifically tailored for analytics dashboards
:::

## Case Study: Stage 1 - Notice {background-color="#F9F9F9"}

:::: {.columns}
::: {.column width="50%"}
### SoundPulse's Pain Points:

- Users spent 4+ minutes configuring filters
- 72% of users reported feeling overwhelmed
- Key insights buried in complex tables
- Decision-making delayed by confusion

:::

::: {.column width="50%"}
```r
# Documenting the problem
problem_data <- list(
  problem = "Users overwhelmed by filtering options",
  evidence = "User testing showed 72% reported feeling confused by interface"
)
```
<!-- image of filtering confusion UI example -->
![](img/filtering_confusion.png){width="90%"} 
:::
::::

::: {.notes}
- Explain the purpose of documenting problem like this
    - Setting up to show a way to integrate into dev workflows at the end
- Applied BID Principles with `{reactable}`
    - **Cognitive Load Theory**: Reduced extraneous processing
    - **Hick's Law**: Simplified choice architecture
    - **Visual Hierarchies**: Created clear information priority
:::

## Implementation Demo: Stages 1-3 {background-color="#F9F9F9"}

::: {.r-stack}
<!-- Example showing grouped bars (Cognitive Load Theory) -->
![](img/reactable_example_1.png){width="75%"}
<!-- Example showing dynamic legend (Hick's Law) -->
![](img/reactable_example_2.png){.fragment width="75%"}
<!-- Example showing color coding (Processing Fluency) -->
![](img/reactable_example_3.png){.fragment width="75%"}
<!-- Example showing grouped elements (Principle of Proximity) -->
![](img/reactable_example_4.png){.fragment width="75%"}

<!-- Commenting to show suggestion placeholders -->
<!-- ![](img/Screenshot_examples_main_1.png){width="75%"}
![](img/Screenshot_examples_main_2.png){.fragment width="75%"}
![](img/Screenshot_examples_main_3.png){.fragment width="75%"}
![](img/Screenshot_examples_main_4.png){.fragment width="75%"} -->
:::

::: {.notes}
- Using `{reactable}` to implement key BID principles
:::

## Implementation Code: Stages 1-3 {.scrollable background-color="#F9F9F9"}

```r
# Implementing BID principles in reactable
library(reactable)

reactable(
  soundpulse_data,
  # Stage 1: Cognitive Load Theory - Grouped structure reduces complexity
  groupBy = "Claim",
  # Stage 2: Processing Fluency - Color coding for instant insights
  columns = list(
    Metric1 = colDef(
      style = function(value) {
        # Color coding enhances processing fluency
        if (value > 50) {
          list(
            background = "rgba(0, 128, 128, 0.2)", 
            color = "#006666",
            fontWeight = "bold"
          )
        } else if (value < 30) {
          list(
            background = "rgba(255, 140, 0, 0.2)", 
            color = "#DD8500",
            fontWeight = "bold"
          )
        }
      }
    )
  ),
  # Stage 3: Principle of Proximity - Group related elements visually
  columnGroups = list(
    colGroup(
      name = "System 1 - Quick Insights", 
      columns = c("Metric1", "Metric2")
    ),
    colGroup(
      name = "System 2 - Detailed Analysis", 
      columns = c("Metric3", "Metric4")
    )
  ),
  # Progressive disclosure supports Cognitive Load Theory
  details = function(index) {
    # Only show details when requested
    detailed_data <- segment_details[
      segment_details$claim_id == soundpulse_data$Claim[index], 
    ]
    div(
      style = "padding: 1rem",
      reactable(detailed_data, outlined = TRUE, striped = TRUE)
    )
  }
)
```

## Case Study: Stages 4-5 {background-color="#F9F9F9"}

:::: {.columns}
::: {.column width="50%"}
### SoundPulse's Challenge:

- Executives comparing metrics without proper context
- Product teams focusing on negative gaps over positive progress
- Insights lost after meetings due to lack of summary
- No clear path to team collaboration

:::

::: {.column width="50%"}
```r
# Documenting biases to address:
challenges_data <- list(
  "Metrics compared without baseline",
  "Focus on gaps rather than progress",
  "Teams seeking data that confirms beliefs"
)
```

<!-- image of anchoring UI example -->
![](img/anchoring_example.png){width="90%"}
:::
::::

::: {.notes}
- Explain the purpose of documenting challenges/biases like this
    - Setting up to show a way to integrate into dev workflows at the end
- Applied BID Principles:
    - **Anchoring Effect**: Added clear reference benchmarks
    - **Framing & Loss Aversion**: Created positive/negative toggle views
    - **Peak-End Rule**: Implemented summary insights panel
:::

## Implementation Demo: Stages 4-5 {background-color="#F9F9F9"}

::: {.r-stack}
<!-- Example showing reference bands for Anchoring Effect -->
![](img/echarts_example_1.png){width="75%"}
<!-- Example showing framing toggle (Framing & Loss Aversion) -->
![](img/echarts_example_2.png){.fragment width="75%"}
<!-- Example showing summary cards (Peak-End Rule) -->
![](img/echarts_example_3.png){.fragment width="75%"}

<!-- Commenting to show suggestion placeholders -->
<!-- ![](img/Screenshot_examples_Deep_Dives_1.png){width="75%"}
![](img/Screenshot_examples_Deep_Dives_2.png){.fragment width="75%"}
![](img/Screenshot_examples_Deep_Dives_3.png){.fragment width="75%"} -->
:::

::: {.notes}
- Using `{echarts4r}` to implement Stages 4 & 5
:::

## Implementation Code: Stages 4-5 {.scrollable background-color="#F9F9F9"}

```r
# Implementing BID principles in echarts4r
library(echarts4r)
library(shiny)

# UI Component with framing toggle (Framing & Loss Aversion)
ui <- fluidPage(
  # Stage 4: Anticipate User Behavior
  radioButtons(
    "framing", "Display View:", 
    choices = c(
      "Progress View" = "progress",
      "Gap View" = "gap"
      ),
      selected = "progress", 
      inline = TRUE
    ),
  # Charts will respond to framing selection
  echarts4rOutput("metricsChart"),
  # Stage 5: Peak-End Rule summary panel
  div(
    class = "summary-panel",
    style = "
      border: 1px solid #ddd;
      padding: 15px;
      border-radius: 5px;
      background-color: #f9f9f9;
      margin-top: 20px;
    ",
    h4("Key Insights Summary"),
    uiOutput("keySummary")
  )
)

# Server logic
server <- function(input, output) {
  output$metricsChart <- renderEcharts4r({
    # Base chart
    chart <- soundpulse_metrics |>
      e_charts(x = category)

    # Apply framing based on user selection
    if(input$framing == "progress") {
      # Positive framing - emphasize progress
      chart |>
        e_bar(progress, name = "Progress to Target") |>
        e_color(c("#3CB371")) |>
        # Stage 4: Anchoring Effect - clear reference point
        e_mark_line(
          data = list(
            list(
              name = "Average", 
              yAxis = mean(soundpulse_metrics$progress),
              lineStyle = list(color = "#5470c6", type = "dashed")
            )
          )
        ) |>
        # Narrative annotations for Data Storytelling
        e_mark_point(
          data = list(
            list(
              name = "Key Insight", 
              coord = c("CategoryA", 76), 
              value = "76% - Exceeds goal",
              symbolSize = 60
            )
          )
        )
    } else {
      # Negative framing - emphasize gap
      chart |>
        e_bar(gap, name = "Gap to Target") |>
        e_color(c("#E95420")) |>
        e_mark_line(
          data = list(
            list(
              name = "Average Gap", 
              yAxis = mean(soundpulse_metrics$gap),
              lineStyle = list(color = "#5470c6", type = "dashed")
            )
          )
        ) |>
        e_mark_point(
          data = list(
            list(
              name = "Key Concern", 
              coord = c("CategoryC", 34), 
              value = "34% Gap - Priority Area",
              symbolSize = 60
            )
          )
        )
    }
  })

  # Peak-End Rule implementation - leave users with clear summary
  output$keySummary <- renderUI({
    if(input$framing == "progress") {
      tagList(
        p("• Category A shows highest progress at 76%"),
        p("• Categories B & D exceed average performance"),
        p("• All segments show improved trajectory from previous quarter")
      )
    } else {
      tagList(
        p("• Category C has critical gap of 34%"),
        p("• Categories E & F show increasing gaps"),
        p("• Immediate attention needed for demographic 25-34")
      )
    }
  })
}
```

## Interactive Demonstration {background-color="#E6F0FF"}

### How Framing Affects Perception & Decision-Making

:::: {.columns .nonincremental}
::: {.column width="50%"}
#### Progress Framing:
<!-- Chart showing 65% progress toward goal -->
![](img/progress_framing.png){width="90%"}
:::

::: {.column width="50%"}
#### Gap Framing:
<!-- Chart showing 35% gap to goal -->
![](img/gap_framing.png){width="90%"}
:::
::::

::: {.fragment}
**SoundPulse Results:** Marketing team preferred progress framing for stakeholder presentations, while product teams found gap framing more actionable for development priorities.
:::

::: {.notes}
- Progress Framing:
    - Motivates by highlighting achievement
    - Creates positive momentum
    - Supports incremental improvement
- Gap Framing:
    - Creates urgency to address shortfall
    - Highlights areas needing improvement
    - May trigger risk-avoidance behaviors
:::

## From Framework to Workflow: Introducing {bidux} {.center background-color="#E6F0FF"}

:::: {.columns}
::: {.column width="60%"}
`{bidux}` is our new R package currently in **Phase 1 development** that helps implement the BID framework:

- **Current Features:**
  - 📚 Concept browser: `bid_concept("processing_fluency")`
  - 🧠 Documentation functions: `bid_notice()` to `bid_validate()`
  
- **Coming Soon (Phase 2-4):**
  - 🛠️ UI Component Library
  - 🤖 LLM Integration 
  - 📊 Testing and Validation Tools
:::

::: {.column width="40%"}
<!-- Console screenshot showing bid_concept output -->
![](img/bidux_console.png){width="95%"}
:::
::::

## What {bidux} Looks Like Today {background-color="#F9F9F9"}

```r
library(bidux)

# Currently available:
# 1. Concept dictionary functionality
concepts <- bid_concepts()
print(concepts)

processing_fluency <- bid_concept("Processing Fluency")
print(processing_fluency)

# 2. Stage documentation (piped workflow)
project_docs <- bid_notice(
  problem = "Dashboard overload", 
  theory = "Cognitive Load Theory",
  evidence = "User testing results"
) |>
  bid_interpret(
    central_question = "How to simplify?",
    data_story = list(hook = "Too complex", context = "Many tabs")
  )

# Coming in Phase 2: UI component library with templates
# ui <- bid_structure(
#   layout = "dual_process",
#   concepts = c("default_effect", "principle_of_proximity")
# )
```

::: {.fragment}
More at: [github.com/bidux](https://github.com)
:::

## {bidux} Roadmap & Development Plan {background-color="#F9F9F9"}

:::: {.columns}
::: {.column width="50%"}
### Current: Phase 1 (Core & Docs)
- ✅ Core package structure
- ✅ Stage documentation functions
- ✅ Comprehensive concept dictionary
- ✅ Integration with dplyr/tibble
:::

::: {.column width="50%"}
### Future Development:
- **Phase 2:** UI Component Library
- **Phase 3:** LLM Integration with `{ellmer}`
- **Phase 4:** Testing & Validation Tools
:::
::::

## SoundPulse Results {.center background-color="#4682B4"}

:::: {.columns}
::: {.column width="50%"}
### Measurable Improvements:

- Decision time reduced by 43%
- Insights per session increased by 67%
- Stakeholder satisfaction improved from 5.2/10 to 8.7/10
- Implementation time for new metrics reduced by 30%
:::

::: {.column width="50%" .fragment}
### Team Feedback:

"The BID framework transformed how we approach dashboards. What once took weeks of refinement now has clear direction from day one."

— Maya Chen, SoundPulse Research Director
:::
::::

## Key Takeaways {.center background-color="#4682B4"}

::: {.nonincremental}
1. **BID** helps reduce friction and improve decisions
2. **`{reactable}` + `{echarts4r}`** help bring BID to life
3. **`{bidux}`** supports you in applying BID at every stage (try it today!)
4. Build dashboards that guide — not overwhelm — your users
:::

## Thank You! {.center background-color="#4682B4"}

::: {.r-fit-text}
Questions?
:::

Milena Eickhoff & Jeremy Winget, PhD
